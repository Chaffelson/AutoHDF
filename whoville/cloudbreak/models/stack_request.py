# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StackRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'availability_zone': 'str',
        'region': 'str',
        'platform_variant': 'str',
        'credential_id': 'int',
        'on_failure_action': 'str',
        'network_id': 'int',
        'ambari_version': 'str',
        'hdp_version': 'str',
        'parameters': 'dict(str, str)',
        'custom_domain': 'str',
        'custom_hostname': 'str',
        'cluster_name_as_subdomain': 'bool',
        'hostgroup_name_as_hostname': 'bool',
        'application_tags': 'dict(str, str)',
        'user_defined_tags': 'dict(str, str)',
        'default_tags': 'dict(str, str)',
        'custom_inputs': 'dict(str, object)',
        'orchestrator': 'OrchestratorRequest',
        'instance_groups': 'list[InstanceGroups]',
        'failure_policy': 'FailurePolicyRequest',
        'credential': 'CredentialRequest',
        'stack_authentication': 'StackAuthentication',
        'network': 'NetworkRequest',
        'image_catalog': 'str',
        'image_id': 'str',
        'os': 'str',
        'flex_id': 'int',
        'gateway_port': 'int',
        'credential_source': 'CredentialSourceRequest',
        'cluster_to_attach': 'int',
        'credential_name': 'str',
        'cluster_request': 'ClusterRequest',
        'cloud_platform': 'str'
    }

    attribute_map = {
        'name': 'name',
        'availability_zone': 'availabilityZone',
        'region': 'region',
        'platform_variant': 'platformVariant',
        'credential_id': 'credentialId',
        'on_failure_action': 'onFailureAction',
        'network_id': 'networkId',
        'ambari_version': 'ambariVersion',
        'hdp_version': 'hdpVersion',
        'parameters': 'parameters',
        'custom_domain': 'customDomain',
        'custom_hostname': 'customHostname',
        'cluster_name_as_subdomain': 'clusterNameAsSubdomain',
        'hostgroup_name_as_hostname': 'hostgroupNameAsHostname',
        'application_tags': 'applicationTags',
        'user_defined_tags': 'userDefinedTags',
        'default_tags': 'defaultTags',
        'custom_inputs': 'customInputs',
        'orchestrator': 'orchestrator',
        'instance_groups': 'instanceGroups',
        'failure_policy': 'failurePolicy',
        'credential': 'credential',
        'stack_authentication': 'stackAuthentication',
        'network': 'network',
        'image_catalog': 'imageCatalog',
        'image_id': 'imageId',
        'os': 'os',
        'flex_id': 'flexId',
        'gateway_port': 'gatewayPort',
        'credential_source': 'credentialSource',
        'cluster_to_attach': 'clusterToAttach',
        'credential_name': 'credentialName',
        'cluster_request': 'clusterRequest',
        'cloud_platform': 'cloudPlatform'
    }

    def __init__(self, name=None, availability_zone=None, region=None, platform_variant=None, credential_id=None, on_failure_action=None, network_id=None, ambari_version=None, hdp_version=None, parameters=None, custom_domain=None, custom_hostname=None, cluster_name_as_subdomain=False, hostgroup_name_as_hostname=False, application_tags=None, user_defined_tags=None, default_tags=None, custom_inputs=None, orchestrator=None, instance_groups=None, failure_policy=None, credential=None, stack_authentication=None, network=None, image_catalog=None, image_id=None, os=None, flex_id=None, gateway_port=None, credential_source=None, cluster_to_attach=None, credential_name=None, cluster_request=None, cloud_platform=None):
        """
        StackRequest - a model defined in Swagger
        """

        self._name = None
        self._availability_zone = None
        self._region = None
        self._platform_variant = None
        self._credential_id = None
        self._on_failure_action = None
        self._network_id = None
        self._ambari_version = None
        self._hdp_version = None
        self._parameters = None
        self._custom_domain = None
        self._custom_hostname = None
        self._cluster_name_as_subdomain = None
        self._hostgroup_name_as_hostname = None
        self._application_tags = None
        self._user_defined_tags = None
        self._default_tags = None
        self._custom_inputs = None
        self._orchestrator = None
        self._instance_groups = None
        self._failure_policy = None
        self._credential = None
        self._stack_authentication = None
        self._network = None
        self._image_catalog = None
        self._image_id = None
        self._os = None
        self._flex_id = None
        self._gateway_port = None
        self._credential_source = None
        self._cluster_to_attach = None
        self._credential_name = None
        self._cluster_request = None
        self._cloud_platform = None

        self.name = name
        if availability_zone is not None:
          self.availability_zone = availability_zone
        if region is not None:
          self.region = region
        if platform_variant is not None:
          self.platform_variant = platform_variant
        if credential_id is not None:
          self.credential_id = credential_id
        if on_failure_action is not None:
          self.on_failure_action = on_failure_action
        if network_id is not None:
          self.network_id = network_id
        if ambari_version is not None:
          self.ambari_version = ambari_version
        if hdp_version is not None:
          self.hdp_version = hdp_version
        if parameters is not None:
          self.parameters = parameters
        if custom_domain is not None:
          self.custom_domain = custom_domain
        if custom_hostname is not None:
          self.custom_hostname = custom_hostname
        if cluster_name_as_subdomain is not None:
          self.cluster_name_as_subdomain = cluster_name_as_subdomain
        if hostgroup_name_as_hostname is not None:
          self.hostgroup_name_as_hostname = hostgroup_name_as_hostname
        if application_tags is not None:
          self.application_tags = application_tags
        if user_defined_tags is not None:
          self.user_defined_tags = user_defined_tags
        if default_tags is not None:
          self.default_tags = default_tags
        if custom_inputs is not None:
          self.custom_inputs = custom_inputs
        if orchestrator is not None:
          self.orchestrator = orchestrator
        self.instance_groups = instance_groups
        if failure_policy is not None:
          self.failure_policy = failure_policy
        if credential is not None:
          self.credential = credential
        if stack_authentication is not None:
          self.stack_authentication = stack_authentication
        if network is not None:
          self.network = network
        if image_catalog is not None:
          self.image_catalog = image_catalog
        if image_id is not None:
          self.image_id = image_id
        if os is not None:
          self.os = os
        if flex_id is not None:
          self.flex_id = flex_id
        if gateway_port is not None:
          self.gateway_port = gateway_port
        if credential_source is not None:
          self.credential_source = credential_source
        if cluster_to_attach is not None:
          self.cluster_to_attach = cluster_to_attach
        if credential_name is not None:
          self.credential_name = credential_name
        if cluster_request is not None:
          self.cluster_request = cluster_request
        if cloud_platform is not None:
          self.cloud_platform = cloud_platform

    @property
    def name(self):
        """
        Gets the name of this StackRequest.
        name of the stack

        :return: The name of this StackRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this StackRequest.
        name of the stack

        :param name: The name of this StackRequest.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 40:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `40`")
        if name is not None and len(name) < 5:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `5`")
        if name is not None and not re.search('(^[a-z][-a-z0-9]*[a-z0-9]$)', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/(^[a-z][-a-z0-9]*[a-z0-9]$)/`")

        self._name = name

    @property
    def availability_zone(self):
        """
        Gets the availability_zone of this StackRequest.
        availability zone of the stack

        :return: The availability_zone of this StackRequest.
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """
        Sets the availability_zone of this StackRequest.
        availability zone of the stack

        :param availability_zone: The availability_zone of this StackRequest.
        :type: str
        """

        self._availability_zone = availability_zone

    @property
    def region(self):
        """
        Gets the region of this StackRequest.
        region of the stack

        :return: The region of this StackRequest.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this StackRequest.
        region of the stack

        :param region: The region of this StackRequest.
        :type: str
        """

        self._region = region

    @property
    def platform_variant(self):
        """
        Gets the platform_variant of this StackRequest.
        cloud provider api variant

        :return: The platform_variant of this StackRequest.
        :rtype: str
        """
        return self._platform_variant

    @platform_variant.setter
    def platform_variant(self, platform_variant):
        """
        Sets the platform_variant of this StackRequest.
        cloud provider api variant

        :param platform_variant: The platform_variant of this StackRequest.
        :type: str
        """

        self._platform_variant = platform_variant

    @property
    def credential_id(self):
        """
        Gets the credential_id of this StackRequest.
        credential resource id for the stack

        :return: The credential_id of this StackRequest.
        :rtype: int
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """
        Sets the credential_id of this StackRequest.
        credential resource id for the stack

        :param credential_id: The credential_id of this StackRequest.
        :type: int
        """

        self._credential_id = credential_id

    @property
    def on_failure_action(self):
        """
        Gets the on_failure_action of this StackRequest.
        action on failure

        :return: The on_failure_action of this StackRequest.
        :rtype: str
        """
        return self._on_failure_action

    @on_failure_action.setter
    def on_failure_action(self, on_failure_action):
        """
        Sets the on_failure_action of this StackRequest.
        action on failure

        :param on_failure_action: The on_failure_action of this StackRequest.
        :type: str
        """
        allowed_values = ["ROLLBACK", "DO_NOTHING"]
        if on_failure_action not in allowed_values:
            raise ValueError(
                "Invalid value for `on_failure_action` ({0}), must be one of {1}"
                .format(on_failure_action, allowed_values)
            )

        self._on_failure_action = on_failure_action

    @property
    def network_id(self):
        """
        Gets the network_id of this StackRequest.
        network resource id for the stack

        :return: The network_id of this StackRequest.
        :rtype: int
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """
        Sets the network_id of this StackRequest.
        network resource id for the stack

        :param network_id: The network_id of this StackRequest.
        :type: int
        """

        self._network_id = network_id

    @property
    def ambari_version(self):
        """
        Gets the ambari_version of this StackRequest.
        specific version of ambari

        :return: The ambari_version of this StackRequest.
        :rtype: str
        """
        return self._ambari_version

    @ambari_version.setter
    def ambari_version(self, ambari_version):
        """
        Sets the ambari_version of this StackRequest.
        specific version of ambari

        :param ambari_version: The ambari_version of this StackRequest.
        :type: str
        """

        self._ambari_version = ambari_version

    @property
    def hdp_version(self):
        """
        Gets the hdp_version of this StackRequest.
        specific version of HDP

        :return: The hdp_version of this StackRequest.
        :rtype: str
        """
        return self._hdp_version

    @hdp_version.setter
    def hdp_version(self, hdp_version):
        """
        Sets the hdp_version of this StackRequest.
        specific version of HDP

        :param hdp_version: The hdp_version of this StackRequest.
        :type: str
        """

        self._hdp_version = hdp_version

    @property
    def parameters(self):
        """
        Gets the parameters of this StackRequest.
        additional cloud specific parameters for stack

        :return: The parameters of this StackRequest.
        :rtype: dict(str, str)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this StackRequest.
        additional cloud specific parameters for stack

        :param parameters: The parameters of this StackRequest.
        :type: dict(str, str)
        """

        self._parameters = parameters

    @property
    def custom_domain(self):
        """
        Gets the custom_domain of this StackRequest.
        custom domain name for the nodes in the stack

        :return: The custom_domain of this StackRequest.
        :rtype: str
        """
        return self._custom_domain

    @custom_domain.setter
    def custom_domain(self, custom_domain):
        """
        Sets the custom_domain of this StackRequest.
        custom domain name for the nodes in the stack

        :param custom_domain: The custom_domain of this StackRequest.
        :type: str
        """

        self._custom_domain = custom_domain

    @property
    def custom_hostname(self):
        """
        Gets the custom_hostname of this StackRequest.
        custom hostname for nodes in the stack

        :return: The custom_hostname of this StackRequest.
        :rtype: str
        """
        return self._custom_hostname

    @custom_hostname.setter
    def custom_hostname(self, custom_hostname):
        """
        Sets the custom_hostname of this StackRequest.
        custom hostname for nodes in the stack

        :param custom_hostname: The custom_hostname of this StackRequest.
        :type: str
        """

        self._custom_hostname = custom_hostname

    @property
    def cluster_name_as_subdomain(self):
        """
        Gets the cluster_name_as_subdomain of this StackRequest.
        using the cluster name to create subdomain

        :return: The cluster_name_as_subdomain of this StackRequest.
        :rtype: bool
        """
        return self._cluster_name_as_subdomain

    @cluster_name_as_subdomain.setter
    def cluster_name_as_subdomain(self, cluster_name_as_subdomain):
        """
        Sets the cluster_name_as_subdomain of this StackRequest.
        using the cluster name to create subdomain

        :param cluster_name_as_subdomain: The cluster_name_as_subdomain of this StackRequest.
        :type: bool
        """

        self._cluster_name_as_subdomain = cluster_name_as_subdomain

    @property
    def hostgroup_name_as_hostname(self):
        """
        Gets the hostgroup_name_as_hostname of this StackRequest.
        using the hostgroup names to create hostnames

        :return: The hostgroup_name_as_hostname of this StackRequest.
        :rtype: bool
        """
        return self._hostgroup_name_as_hostname

    @hostgroup_name_as_hostname.setter
    def hostgroup_name_as_hostname(self, hostgroup_name_as_hostname):
        """
        Sets the hostgroup_name_as_hostname of this StackRequest.
        using the hostgroup names to create hostnames

        :param hostgroup_name_as_hostname: The hostgroup_name_as_hostname of this StackRequest.
        :type: bool
        """

        self._hostgroup_name_as_hostname = hostgroup_name_as_hostname

    @property
    def application_tags(self):
        """
        Gets the application_tags of this StackRequest.
        stack related application tags

        :return: The application_tags of this StackRequest.
        :rtype: dict(str, str)
        """
        return self._application_tags

    @application_tags.setter
    def application_tags(self, application_tags):
        """
        Sets the application_tags of this StackRequest.
        stack related application tags

        :param application_tags: The application_tags of this StackRequest.
        :type: dict(str, str)
        """

        self._application_tags = application_tags

    @property
    def user_defined_tags(self):
        """
        Gets the user_defined_tags of this StackRequest.
        stack related userdefined tags

        :return: The user_defined_tags of this StackRequest.
        :rtype: dict(str, str)
        """
        return self._user_defined_tags

    @user_defined_tags.setter
    def user_defined_tags(self, user_defined_tags):
        """
        Sets the user_defined_tags of this StackRequest.
        stack related userdefined tags

        :param user_defined_tags: The user_defined_tags of this StackRequest.
        :type: dict(str, str)
        """

        self._user_defined_tags = user_defined_tags

    @property
    def default_tags(self):
        """
        Gets the default_tags of this StackRequest.
        stack related default tags

        :return: The default_tags of this StackRequest.
        :rtype: dict(str, str)
        """
        return self._default_tags

    @default_tags.setter
    def default_tags(self, default_tags):
        """
        Sets the default_tags of this StackRequest.
        stack related default tags

        :param default_tags: The default_tags of this StackRequest.
        :type: dict(str, str)
        """

        self._default_tags = default_tags

    @property
    def custom_inputs(self):
        """
        Gets the custom_inputs of this StackRequest.
        Custom parameters as a json

        :return: The custom_inputs of this StackRequest.
        :rtype: dict(str, object)
        """
        return self._custom_inputs

    @custom_inputs.setter
    def custom_inputs(self, custom_inputs):
        """
        Sets the custom_inputs of this StackRequest.
        Custom parameters as a json

        :param custom_inputs: The custom_inputs of this StackRequest.
        :type: dict(str, object)
        """

        self._custom_inputs = custom_inputs

    @property
    def orchestrator(self):
        """
        Gets the orchestrator of this StackRequest.
        the details of the container orchestrator api to use

        :return: The orchestrator of this StackRequest.
        :rtype: OrchestratorRequest
        """
        return self._orchestrator

    @orchestrator.setter
    def orchestrator(self, orchestrator):
        """
        Sets the orchestrator of this StackRequest.
        the details of the container orchestrator api to use

        :param orchestrator: The orchestrator of this StackRequest.
        :type: OrchestratorRequest
        """

        self._orchestrator = orchestrator

    @property
    def instance_groups(self):
        """
        Gets the instance_groups of this StackRequest.
        collection of instance groupst

        :return: The instance_groups of this StackRequest.
        :rtype: list[InstanceGroups]
        """
        return self._instance_groups

    @instance_groups.setter
    def instance_groups(self, instance_groups):
        """
        Sets the instance_groups of this StackRequest.
        collection of instance groupst

        :param instance_groups: The instance_groups of this StackRequest.
        :type: list[InstanceGroups]
        """
        if instance_groups is None:
            raise ValueError("Invalid value for `instance_groups`, must not be `None`")

        self._instance_groups = instance_groups

    @property
    def failure_policy(self):
        """
        Gets the failure_policy of this StackRequest.
        failure policy in case of failures

        :return: The failure_policy of this StackRequest.
        :rtype: FailurePolicyRequest
        """
        return self._failure_policy

    @failure_policy.setter
    def failure_policy(self, failure_policy):
        """
        Sets the failure_policy of this StackRequest.
        failure policy in case of failures

        :param failure_policy: The failure_policy of this StackRequest.
        :type: FailurePolicyRequest
        """

        self._failure_policy = failure_policy

    @property
    def credential(self):
        """
        Gets the credential of this StackRequest.
        stack related credential

        :return: The credential of this StackRequest.
        :rtype: CredentialRequest
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """
        Sets the credential of this StackRequest.
        stack related credential

        :param credential: The credential of this StackRequest.
        :type: CredentialRequest
        """

        self._credential = credential

    @property
    def stack_authentication(self):
        """
        Gets the stack_authentication of this StackRequest.
        stack related authentication

        :return: The stack_authentication of this StackRequest.
        :rtype: StackAuthentication
        """
        return self._stack_authentication

    @stack_authentication.setter
    def stack_authentication(self, stack_authentication):
        """
        Sets the stack_authentication of this StackRequest.
        stack related authentication

        :param stack_authentication: The stack_authentication of this StackRequest.
        :type: StackAuthentication
        """

        self._stack_authentication = stack_authentication

    @property
    def network(self):
        """
        Gets the network of this StackRequest.
        stack related network

        :return: The network of this StackRequest.
        :rtype: NetworkRequest
        """
        return self._network

    @network.setter
    def network(self, network):
        """
        Sets the network of this StackRequest.
        stack related network

        :param network: The network of this StackRequest.
        :type: NetworkRequest
        """

        self._network = network

    @property
    def image_catalog(self):
        """
        Gets the image_catalog of this StackRequest.
        custom image catalog URL

        :return: The image_catalog of this StackRequest.
        :rtype: str
        """
        return self._image_catalog

    @image_catalog.setter
    def image_catalog(self, image_catalog):
        """
        Sets the image_catalog of this StackRequest.
        custom image catalog URL

        :param image_catalog: The image_catalog of this StackRequest.
        :type: str
        """

        self._image_catalog = image_catalog

    @property
    def image_id(self):
        """
        Gets the image_id of this StackRequest.
        virtual machine image id from ImageCatalog, machines of the cluster will be started from this image

        :return: The image_id of this StackRequest.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """
        Sets the image_id of this StackRequest.
        virtual machine image id from ImageCatalog, machines of the cluster will be started from this image

        :param image_id: The image_id of this StackRequest.
        :type: str
        """

        self._image_id = image_id

    @property
    def os(self):
        """
        Gets the os of this StackRequest.
        os type of the image, this property is only considered when no specific image id is provided

        :return: The os of this StackRequest.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """
        Sets the os of this StackRequest.
        os type of the image, this property is only considered when no specific image id is provided

        :param os: The os of this StackRequest.
        :type: str
        """

        self._os = os

    @property
    def flex_id(self):
        """
        Gets the flex_id of this StackRequest.
        id of the related flex subscription

        :return: The flex_id of this StackRequest.
        :rtype: int
        """
        return self._flex_id

    @flex_id.setter
    def flex_id(self, flex_id):
        """
        Sets the flex_id of this StackRequest.
        id of the related flex subscription

        :param flex_id: The flex_id of this StackRequest.
        :type: int
        """

        self._flex_id = flex_id

    @property
    def gateway_port(self):
        """
        Gets the gateway_port of this StackRequest.
        port of the gateway secured proxy

        :return: The gateway_port of this StackRequest.
        :rtype: int
        """
        return self._gateway_port

    @gateway_port.setter
    def gateway_port(self, gateway_port):
        """
        Sets the gateway_port of this StackRequest.
        port of the gateway secured proxy

        :param gateway_port: The gateway_port of this StackRequest.
        :type: int
        """

        self._gateway_port = gateway_port

    @property
    def credential_source(self):
        """
        Gets the credential_source of this StackRequest.
        source credential object for cloning

        :return: The credential_source of this StackRequest.
        :rtype: CredentialSourceRequest
        """
        return self._credential_source

    @credential_source.setter
    def credential_source(self, credential_source):
        """
        Sets the credential_source of this StackRequest.
        source credential object for cloning

        :param credential_source: The credential_source of this StackRequest.
        :type: CredentialSourceRequest
        """

        self._credential_source = credential_source

    @property
    def cluster_to_attach(self):
        """
        Gets the cluster_to_attach of this StackRequest.
        Shared service request

        :return: The cluster_to_attach of this StackRequest.
        :rtype: int
        """
        return self._cluster_to_attach

    @cluster_to_attach.setter
    def cluster_to_attach(self, cluster_to_attach):
        """
        Sets the cluster_to_attach of this StackRequest.
        Shared service request

        :param cluster_to_attach: The cluster_to_attach of this StackRequest.
        :type: int
        """

        self._cluster_to_attach = cluster_to_attach

    @property
    def credential_name(self):
        """
        Gets the credential_name of this StackRequest.
        credential resource name for the stack

        :return: The credential_name of this StackRequest.
        :rtype: str
        """
        return self._credential_name

    @credential_name.setter
    def credential_name(self, credential_name):
        """
        Sets the credential_name of this StackRequest.
        credential resource name for the stack

        :param credential_name: The credential_name of this StackRequest.
        :type: str
        """

        self._credential_name = credential_name

    @property
    def cluster_request(self):
        """
        Gets the cluster_request of this StackRequest.
        cluster request object on stack

        :return: The cluster_request of this StackRequest.
        :rtype: ClusterRequest
        """
        return self._cluster_request

    @cluster_request.setter
    def cluster_request(self, cluster_request):
        """
        Sets the cluster_request of this StackRequest.
        cluster request object on stack

        :param cluster_request: The cluster_request of this StackRequest.
        :type: ClusterRequest
        """

        self._cluster_request = cluster_request

    @property
    def cloud_platform(self):
        """
        Gets the cloud_platform of this StackRequest.
        type of cloud provider

        :return: The cloud_platform of this StackRequest.
        :rtype: str
        """
        return self._cloud_platform

    @cloud_platform.setter
    def cloud_platform(self, cloud_platform):
        """
        Sets the cloud_platform of this StackRequest.
        type of cloud provider

        :param cloud_platform: The cloud_platform of this StackRequest.
        :type: str
        """

        self._cloud_platform = cloud_platform

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StackRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
