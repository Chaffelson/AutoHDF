# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OperationDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_type': 'str',
        'resource_id': 'int',
        'resource_name': 'str',
        'resource_type': 'str',
        'timestamp': 'int',
        'user_id_v3': 'str',
        'user_name_v3': 'str',
        'account': 'str',
        'user_id': 'str',
        'user_name': 'str',
        'cloudbreak_id': 'str',
        'cloudbreak_version': 'str',
        'workspace_id': 'int',
        'zoned_date_time': 'datetime'
    }

    attribute_map = {
        'event_type': 'eventType',
        'resource_id': 'resourceId',
        'resource_name': 'resourceName',
        'resource_type': 'resourceType',
        'timestamp': 'timestamp',
        'user_id_v3': 'userIdV3',
        'user_name_v3': 'userNameV3',
        'account': 'account',
        'user_id': 'userId',
        'user_name': 'userName',
        'cloudbreak_id': 'cloudbreakId',
        'cloudbreak_version': 'cloudbreakVersion',
        'workspace_id': 'workspaceId',
        'zoned_date_time': 'zonedDateTime'
    }

    def __init__(self, event_type=None, resource_id=None, resource_name=None, resource_type=None, timestamp=None, user_id_v3=None, user_name_v3=None, account=None, user_id=None, user_name=None, cloudbreak_id=None, cloudbreak_version=None, workspace_id=None, zoned_date_time=None):
        """
        OperationDetails - a model defined in Swagger
        """

        self._event_type = None
        self._resource_id = None
        self._resource_name = None
        self._resource_type = None
        self._timestamp = None
        self._user_id_v3 = None
        self._user_name_v3 = None
        self._account = None
        self._user_id = None
        self._user_name = None
        self._cloudbreak_id = None
        self._cloudbreak_version = None
        self._workspace_id = None
        self._zoned_date_time = None

        if event_type is not None:
          self.event_type = event_type
        if resource_id is not None:
          self.resource_id = resource_id
        if resource_name is not None:
          self.resource_name = resource_name
        if resource_type is not None:
          self.resource_type = resource_type
        if timestamp is not None:
          self.timestamp = timestamp
        if user_id_v3 is not None:
          self.user_id_v3 = user_id_v3
        if user_name_v3 is not None:
          self.user_name_v3 = user_name_v3
        if account is not None:
          self.account = account
        if user_id is not None:
          self.user_id = user_id
        if user_name is not None:
          self.user_name = user_name
        if cloudbreak_id is not None:
          self.cloudbreak_id = cloudbreak_id
        if cloudbreak_version is not None:
          self.cloudbreak_version = cloudbreak_version
        if workspace_id is not None:
          self.workspace_id = workspace_id
        if zoned_date_time is not None:
          self.zoned_date_time = zoned_date_time

    @property
    def event_type(self):
        """
        Gets the event_type of this OperationDetails.

        :return: The event_type of this OperationDetails.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """
        Sets the event_type of this OperationDetails.

        :param event_type: The event_type of this OperationDetails.
        :type: str
        """
        allowed_values = ["REST", "FLOW", "NOTIFICATION"]
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def resource_id(self):
        """
        Gets the resource_id of this OperationDetails.

        :return: The resource_id of this OperationDetails.
        :rtype: int
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """
        Sets the resource_id of this OperationDetails.

        :param resource_id: The resource_id of this OperationDetails.
        :type: int
        """

        self._resource_id = resource_id

    @property
    def resource_name(self):
        """
        Gets the resource_name of this OperationDetails.

        :return: The resource_name of this OperationDetails.
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """
        Sets the resource_name of this OperationDetails.

        :param resource_name: The resource_name of this OperationDetails.
        :type: str
        """

        self._resource_name = resource_name

    @property
    def resource_type(self):
        """
        Gets the resource_type of this OperationDetails.

        :return: The resource_type of this OperationDetails.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """
        Sets the resource_type of this OperationDetails.

        :param resource_type: The resource_type of this OperationDetails.
        :type: str
        """

        self._resource_type = resource_type

    @property
    def timestamp(self):
        """
        Gets the timestamp of this OperationDetails.

        :return: The timestamp of this OperationDetails.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this OperationDetails.

        :param timestamp: The timestamp of this OperationDetails.
        :type: int
        """

        self._timestamp = timestamp

    @property
    def user_id_v3(self):
        """
        Gets the user_id_v3 of this OperationDetails.

        :return: The user_id_v3 of this OperationDetails.
        :rtype: str
        """
        return self._user_id_v3

    @user_id_v3.setter
    def user_id_v3(self, user_id_v3):
        """
        Sets the user_id_v3 of this OperationDetails.

        :param user_id_v3: The user_id_v3 of this OperationDetails.
        :type: str
        """

        self._user_id_v3 = user_id_v3

    @property
    def user_name_v3(self):
        """
        Gets the user_name_v3 of this OperationDetails.

        :return: The user_name_v3 of this OperationDetails.
        :rtype: str
        """
        return self._user_name_v3

    @user_name_v3.setter
    def user_name_v3(self, user_name_v3):
        """
        Sets the user_name_v3 of this OperationDetails.

        :param user_name_v3: The user_name_v3 of this OperationDetails.
        :type: str
        """

        self._user_name_v3 = user_name_v3

    @property
    def account(self):
        """
        Gets the account of this OperationDetails.

        :return: The account of this OperationDetails.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this OperationDetails.

        :param account: The account of this OperationDetails.
        :type: str
        """

        self._account = account

    @property
    def user_id(self):
        """
        Gets the user_id of this OperationDetails.

        :return: The user_id of this OperationDetails.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this OperationDetails.

        :param user_id: The user_id of this OperationDetails.
        :type: str
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """
        Gets the user_name of this OperationDetails.

        :return: The user_name of this OperationDetails.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this OperationDetails.

        :param user_name: The user_name of this OperationDetails.
        :type: str
        """

        self._user_name = user_name

    @property
    def cloudbreak_id(self):
        """
        Gets the cloudbreak_id of this OperationDetails.

        :return: The cloudbreak_id of this OperationDetails.
        :rtype: str
        """
        return self._cloudbreak_id

    @cloudbreak_id.setter
    def cloudbreak_id(self, cloudbreak_id):
        """
        Sets the cloudbreak_id of this OperationDetails.

        :param cloudbreak_id: The cloudbreak_id of this OperationDetails.
        :type: str
        """

        self._cloudbreak_id = cloudbreak_id

    @property
    def cloudbreak_version(self):
        """
        Gets the cloudbreak_version of this OperationDetails.

        :return: The cloudbreak_version of this OperationDetails.
        :rtype: str
        """
        return self._cloudbreak_version

    @cloudbreak_version.setter
    def cloudbreak_version(self, cloudbreak_version):
        """
        Sets the cloudbreak_version of this OperationDetails.

        :param cloudbreak_version: The cloudbreak_version of this OperationDetails.
        :type: str
        """

        self._cloudbreak_version = cloudbreak_version

    @property
    def workspace_id(self):
        """
        Gets the workspace_id of this OperationDetails.

        :return: The workspace_id of this OperationDetails.
        :rtype: int
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """
        Sets the workspace_id of this OperationDetails.

        :param workspace_id: The workspace_id of this OperationDetails.
        :type: int
        """

        self._workspace_id = workspace_id

    @property
    def zoned_date_time(self):
        """
        Gets the zoned_date_time of this OperationDetails.

        :return: The zoned_date_time of this OperationDetails.
        :rtype: datetime
        """
        return self._zoned_date_time

    @zoned_date_time.setter
    def zoned_date_time(self, zoned_date_time):
        """
        Sets the zoned_date_time of this OperationDetails.

        :param zoned_date_time: The zoned_date_time of this OperationDetails.
        :type: datetime
        """

        self._zoned_date_time = zoned_date_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OperationDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
