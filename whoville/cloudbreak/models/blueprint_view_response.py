# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BlueprintViewResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'stack_type': 'str',
        'stack_version': 'str',
        'host_group_count': 'int',
        'status': 'str',
        'tags': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'stack_type': 'stackType',
        'stack_version': 'stackVersion',
        'host_group_count': 'hostGroupCount',
        'status': 'status',
        'tags': 'tags'
    }

    def __init__(self, id=None, name=None, description=None, stack_type=None, stack_version=None, host_group_count=None, status=None, tags=None):
        """
        BlueprintViewResponse - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._description = None
        self._stack_type = None
        self._stack_version = None
        self._host_group_count = None
        self._status = None
        self._tags = None

        if id is not None:
          self.id = id
        self.name = name
        if description is not None:
          self.description = description
        if stack_type is not None:
          self.stack_type = stack_type
        if stack_version is not None:
          self.stack_version = stack_version
        if host_group_count is not None:
          self.host_group_count = host_group_count
        if status is not None:
          self.status = status
        if tags is not None:
          self.tags = tags

    @property
    def id(self):
        """
        Gets the id of this BlueprintViewResponse.
        id of the resource

        :return: The id of this BlueprintViewResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this BlueprintViewResponse.
        id of the resource

        :param id: The id of this BlueprintViewResponse.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this BlueprintViewResponse.
        name of the resource

        :return: The name of this BlueprintViewResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this BlueprintViewResponse.
        name of the resource

        :param name: The name of this BlueprintViewResponse.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search('^[^;\/%]*$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[^;\/%]*$/`")

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this BlueprintViewResponse.
        description of the resource

        :return: The description of this BlueprintViewResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this BlueprintViewResponse.
        description of the resource

        :param description: The description of this BlueprintViewResponse.
        :type: str
        """
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def stack_type(self):
        """
        Gets the stack_type of this BlueprintViewResponse.
        The type of the stack: for example HDP or HDF

        :return: The stack_type of this BlueprintViewResponse.
        :rtype: str
        """
        return self._stack_type

    @stack_type.setter
    def stack_type(self, stack_type):
        """
        Sets the stack_type of this BlueprintViewResponse.
        The type of the stack: for example HDP or HDF

        :param stack_type: The stack_type of this BlueprintViewResponse.
        :type: str
        """

        self._stack_type = stack_type

    @property
    def stack_version(self):
        """
        Gets the stack_version of this BlueprintViewResponse.
        The version of the stack

        :return: The stack_version of this BlueprintViewResponse.
        :rtype: str
        """
        return self._stack_version

    @stack_version.setter
    def stack_version(self, stack_version):
        """
        Sets the stack_version of this BlueprintViewResponse.
        The version of the stack

        :param stack_version: The stack_version of this BlueprintViewResponse.
        :type: str
        """

        self._stack_version = stack_version

    @property
    def host_group_count(self):
        """
        Gets the host_group_count of this BlueprintViewResponse.
        number of host groups

        :return: The host_group_count of this BlueprintViewResponse.
        :rtype: int
        """
        return self._host_group_count

    @host_group_count.setter
    def host_group_count(self, host_group_count):
        """
        Sets the host_group_count of this BlueprintViewResponse.
        number of host groups

        :param host_group_count: The host_group_count of this BlueprintViewResponse.
        :type: int
        """

        self._host_group_count = host_group_count

    @property
    def status(self):
        """
        Gets the status of this BlueprintViewResponse.
        status of the blueprint

        :return: The status of this BlueprintViewResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this BlueprintViewResponse.
        status of the blueprint

        :param status: The status of this BlueprintViewResponse.
        :type: str
        """
        allowed_values = ["DEFAULT", "DEFAULT_DELETED", "USER_MANAGED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tags(self):
        """
        Gets the tags of this BlueprintViewResponse.
        user defined tags for blueprint

        :return: The tags of this BlueprintViewResponse.
        :rtype: dict(str, object)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this BlueprintViewResponse.
        user defined tags for blueprint

        :param tags: The tags of this BlueprintViewResponse.
        :type: dict(str, object)
        """

        self._tags = tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BlueprintViewResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
