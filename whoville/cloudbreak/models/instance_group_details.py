# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InstanceGroupDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_name': 'str',
        'group_type': 'str',
        'node_count': 'int',
        'instance_type': 'str',
        'volume_type': 'str',
        'volume_size': 'int',
        'volume_count': 'int',
        'security_group': 'SecurityGroupDetails'
    }

    attribute_map = {
        'group_name': 'groupName',
        'group_type': 'groupType',
        'node_count': 'nodeCount',
        'instance_type': 'instanceType',
        'volume_type': 'volumeType',
        'volume_size': 'volumeSize',
        'volume_count': 'volumeCount',
        'security_group': 'securityGroup'
    }

    def __init__(self, group_name=None, group_type=None, node_count=None, instance_type=None, volume_type=None, volume_size=None, volume_count=None, security_group=None):
        """
        InstanceGroupDetails - a model defined in Swagger
        """

        self._group_name = None
        self._group_type = None
        self._node_count = None
        self._instance_type = None
        self._volume_type = None
        self._volume_size = None
        self._volume_count = None
        self._security_group = None

        if group_name is not None:
          self.group_name = group_name
        if group_type is not None:
          self.group_type = group_type
        if node_count is not None:
          self.node_count = node_count
        if instance_type is not None:
          self.instance_type = instance_type
        if volume_type is not None:
          self.volume_type = volume_type
        if volume_size is not None:
          self.volume_size = volume_size
        if volume_count is not None:
          self.volume_count = volume_count
        if security_group is not None:
          self.security_group = security_group

    @property
    def group_name(self):
        """
        Gets the group_name of this InstanceGroupDetails.

        :return: The group_name of this InstanceGroupDetails.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """
        Sets the group_name of this InstanceGroupDetails.

        :param group_name: The group_name of this InstanceGroupDetails.
        :type: str
        """

        self._group_name = group_name

    @property
    def group_type(self):
        """
        Gets the group_type of this InstanceGroupDetails.

        :return: The group_type of this InstanceGroupDetails.
        :rtype: str
        """
        return self._group_type

    @group_type.setter
    def group_type(self, group_type):
        """
        Sets the group_type of this InstanceGroupDetails.

        :param group_type: The group_type of this InstanceGroupDetails.
        :type: str
        """

        self._group_type = group_type

    @property
    def node_count(self):
        """
        Gets the node_count of this InstanceGroupDetails.

        :return: The node_count of this InstanceGroupDetails.
        :rtype: int
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """
        Sets the node_count of this InstanceGroupDetails.

        :param node_count: The node_count of this InstanceGroupDetails.
        :type: int
        """

        self._node_count = node_count

    @property
    def instance_type(self):
        """
        Gets the instance_type of this InstanceGroupDetails.

        :return: The instance_type of this InstanceGroupDetails.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """
        Sets the instance_type of this InstanceGroupDetails.

        :param instance_type: The instance_type of this InstanceGroupDetails.
        :type: str
        """

        self._instance_type = instance_type

    @property
    def volume_type(self):
        """
        Gets the volume_type of this InstanceGroupDetails.

        :return: The volume_type of this InstanceGroupDetails.
        :rtype: str
        """
        return self._volume_type

    @volume_type.setter
    def volume_type(self, volume_type):
        """
        Sets the volume_type of this InstanceGroupDetails.

        :param volume_type: The volume_type of this InstanceGroupDetails.
        :type: str
        """

        self._volume_type = volume_type

    @property
    def volume_size(self):
        """
        Gets the volume_size of this InstanceGroupDetails.

        :return: The volume_size of this InstanceGroupDetails.
        :rtype: int
        """
        return self._volume_size

    @volume_size.setter
    def volume_size(self, volume_size):
        """
        Sets the volume_size of this InstanceGroupDetails.

        :param volume_size: The volume_size of this InstanceGroupDetails.
        :type: int
        """

        self._volume_size = volume_size

    @property
    def volume_count(self):
        """
        Gets the volume_count of this InstanceGroupDetails.

        :return: The volume_count of this InstanceGroupDetails.
        :rtype: int
        """
        return self._volume_count

    @volume_count.setter
    def volume_count(self, volume_count):
        """
        Sets the volume_count of this InstanceGroupDetails.

        :param volume_count: The volume_count of this InstanceGroupDetails.
        :type: int
        """

        self._volume_count = volume_count

    @property
    def security_group(self):
        """
        Gets the security_group of this InstanceGroupDetails.

        :return: The security_group of this InstanceGroupDetails.
        :rtype: SecurityGroupDetails
        """
        return self._security_group

    @security_group.setter
    def security_group(self, security_group):
        """
        Sets the security_group of this InstanceGroupDetails.

        :param security_group: The security_group of this InstanceGroupDetails.
        :type: SecurityGroupDetails
        """

        self._security_group = security_group

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InstanceGroupDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
