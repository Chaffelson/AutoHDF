# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NotificationDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notification_type': 'str',
        'notification': 'str',
        'cloud': 'str',
        'region': 'str',
        'availabilty_zone': 'str',
        'stack_id': 'int',
        'stack_name': 'str',
        'stack_status': 'str',
        'node_count': 'int',
        'instance_group': 'str',
        'cluster_id': 'int',
        'cluster_name': 'str',
        'cluster_status': 'str',
        'blueprint_name': 'str',
        'blueprint_id': 'int'
    }

    attribute_map = {
        'notification_type': 'notificationType',
        'notification': 'notification',
        'cloud': 'cloud',
        'region': 'region',
        'availabilty_zone': 'availabiltyZone',
        'stack_id': 'stackId',
        'stack_name': 'stackName',
        'stack_status': 'stackStatus',
        'node_count': 'nodeCount',
        'instance_group': 'instanceGroup',
        'cluster_id': 'clusterId',
        'cluster_name': 'clusterName',
        'cluster_status': 'clusterStatus',
        'blueprint_name': 'blueprintName',
        'blueprint_id': 'blueprintId'
    }

    def __init__(self, notification_type=None, notification=None, cloud=None, region=None, availabilty_zone=None, stack_id=None, stack_name=None, stack_status=None, node_count=None, instance_group=None, cluster_id=None, cluster_name=None, cluster_status=None, blueprint_name=None, blueprint_id=None):
        """
        NotificationDetails - a model defined in Swagger
        """

        self._notification_type = None
        self._notification = None
        self._cloud = None
        self._region = None
        self._availabilty_zone = None
        self._stack_id = None
        self._stack_name = None
        self._stack_status = None
        self._node_count = None
        self._instance_group = None
        self._cluster_id = None
        self._cluster_name = None
        self._cluster_status = None
        self._blueprint_name = None
        self._blueprint_id = None

        if notification_type is not None:
          self.notification_type = notification_type
        if notification is not None:
          self.notification = notification
        if cloud is not None:
          self.cloud = cloud
        if region is not None:
          self.region = region
        if availabilty_zone is not None:
          self.availabilty_zone = availabilty_zone
        if stack_id is not None:
          self.stack_id = stack_id
        if stack_name is not None:
          self.stack_name = stack_name
        if stack_status is not None:
          self.stack_status = stack_status
        if node_count is not None:
          self.node_count = node_count
        if instance_group is not None:
          self.instance_group = instance_group
        if cluster_id is not None:
          self.cluster_id = cluster_id
        if cluster_name is not None:
          self.cluster_name = cluster_name
        if cluster_status is not None:
          self.cluster_status = cluster_status
        if blueprint_name is not None:
          self.blueprint_name = blueprint_name
        if blueprint_id is not None:
          self.blueprint_id = blueprint_id

    @property
    def notification_type(self):
        """
        Gets the notification_type of this NotificationDetails.

        :return: The notification_type of this NotificationDetails.
        :rtype: str
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """
        Sets the notification_type of this NotificationDetails.

        :param notification_type: The notification_type of this NotificationDetails.
        :type: str
        """

        self._notification_type = notification_type

    @property
    def notification(self):
        """
        Gets the notification of this NotificationDetails.

        :return: The notification of this NotificationDetails.
        :rtype: str
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """
        Sets the notification of this NotificationDetails.

        :param notification: The notification of this NotificationDetails.
        :type: str
        """

        self._notification = notification

    @property
    def cloud(self):
        """
        Gets the cloud of this NotificationDetails.

        :return: The cloud of this NotificationDetails.
        :rtype: str
        """
        return self._cloud

    @cloud.setter
    def cloud(self, cloud):
        """
        Sets the cloud of this NotificationDetails.

        :param cloud: The cloud of this NotificationDetails.
        :type: str
        """

        self._cloud = cloud

    @property
    def region(self):
        """
        Gets the region of this NotificationDetails.

        :return: The region of this NotificationDetails.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this NotificationDetails.

        :param region: The region of this NotificationDetails.
        :type: str
        """

        self._region = region

    @property
    def availabilty_zone(self):
        """
        Gets the availabilty_zone of this NotificationDetails.

        :return: The availabilty_zone of this NotificationDetails.
        :rtype: str
        """
        return self._availabilty_zone

    @availabilty_zone.setter
    def availabilty_zone(self, availabilty_zone):
        """
        Sets the availabilty_zone of this NotificationDetails.

        :param availabilty_zone: The availabilty_zone of this NotificationDetails.
        :type: str
        """

        self._availabilty_zone = availabilty_zone

    @property
    def stack_id(self):
        """
        Gets the stack_id of this NotificationDetails.

        :return: The stack_id of this NotificationDetails.
        :rtype: int
        """
        return self._stack_id

    @stack_id.setter
    def stack_id(self, stack_id):
        """
        Sets the stack_id of this NotificationDetails.

        :param stack_id: The stack_id of this NotificationDetails.
        :type: int
        """

        self._stack_id = stack_id

    @property
    def stack_name(self):
        """
        Gets the stack_name of this NotificationDetails.

        :return: The stack_name of this NotificationDetails.
        :rtype: str
        """
        return self._stack_name

    @stack_name.setter
    def stack_name(self, stack_name):
        """
        Sets the stack_name of this NotificationDetails.

        :param stack_name: The stack_name of this NotificationDetails.
        :type: str
        """

        self._stack_name = stack_name

    @property
    def stack_status(self):
        """
        Gets the stack_status of this NotificationDetails.

        :return: The stack_status of this NotificationDetails.
        :rtype: str
        """
        return self._stack_status

    @stack_status.setter
    def stack_status(self, stack_status):
        """
        Sets the stack_status of this NotificationDetails.

        :param stack_status: The stack_status of this NotificationDetails.
        :type: str
        """

        self._stack_status = stack_status

    @property
    def node_count(self):
        """
        Gets the node_count of this NotificationDetails.

        :return: The node_count of this NotificationDetails.
        :rtype: int
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """
        Sets the node_count of this NotificationDetails.

        :param node_count: The node_count of this NotificationDetails.
        :type: int
        """

        self._node_count = node_count

    @property
    def instance_group(self):
        """
        Gets the instance_group of this NotificationDetails.

        :return: The instance_group of this NotificationDetails.
        :rtype: str
        """
        return self._instance_group

    @instance_group.setter
    def instance_group(self, instance_group):
        """
        Sets the instance_group of this NotificationDetails.

        :param instance_group: The instance_group of this NotificationDetails.
        :type: str
        """

        self._instance_group = instance_group

    @property
    def cluster_id(self):
        """
        Gets the cluster_id of this NotificationDetails.

        :return: The cluster_id of this NotificationDetails.
        :rtype: int
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """
        Sets the cluster_id of this NotificationDetails.

        :param cluster_id: The cluster_id of this NotificationDetails.
        :type: int
        """

        self._cluster_id = cluster_id

    @property
    def cluster_name(self):
        """
        Gets the cluster_name of this NotificationDetails.

        :return: The cluster_name of this NotificationDetails.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """
        Sets the cluster_name of this NotificationDetails.

        :param cluster_name: The cluster_name of this NotificationDetails.
        :type: str
        """

        self._cluster_name = cluster_name

    @property
    def cluster_status(self):
        """
        Gets the cluster_status of this NotificationDetails.

        :return: The cluster_status of this NotificationDetails.
        :rtype: str
        """
        return self._cluster_status

    @cluster_status.setter
    def cluster_status(self, cluster_status):
        """
        Sets the cluster_status of this NotificationDetails.

        :param cluster_status: The cluster_status of this NotificationDetails.
        :type: str
        """

        self._cluster_status = cluster_status

    @property
    def blueprint_name(self):
        """
        Gets the blueprint_name of this NotificationDetails.

        :return: The blueprint_name of this NotificationDetails.
        :rtype: str
        """
        return self._blueprint_name

    @blueprint_name.setter
    def blueprint_name(self, blueprint_name):
        """
        Sets the blueprint_name of this NotificationDetails.

        :param blueprint_name: The blueprint_name of this NotificationDetails.
        :type: str
        """

        self._blueprint_name = blueprint_name

    @property
    def blueprint_id(self):
        """
        Gets the blueprint_id of this NotificationDetails.

        :return: The blueprint_id of this NotificationDetails.
        :rtype: int
        """
        return self._blueprint_id

    @blueprint_id.setter
    def blueprint_id(self, blueprint_id):
        """
        Sets the blueprint_id of this NotificationDetails.

        :param blueprint_id: The blueprint_id of this NotificationDetails.
        :type: int
        """

        self._blueprint_id = blueprint_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NotificationDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
