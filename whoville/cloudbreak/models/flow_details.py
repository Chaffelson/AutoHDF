# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FlowDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'flow_chain_type': 'str',
        'flow_type': 'str',
        'flow_chain_id': 'str',
        'flow_id': 'str',
        'flow_state': 'str',
        'next_flow_state': 'str',
        'flow_event': 'str',
        'duration': 'int'
    }

    attribute_map = {
        'flow_chain_type': 'flowChainType',
        'flow_type': 'flowType',
        'flow_chain_id': 'flowChainId',
        'flow_id': 'flowId',
        'flow_state': 'flowState',
        'next_flow_state': 'nextFlowState',
        'flow_event': 'flowEvent',
        'duration': 'duration'
    }

    def __init__(self, flow_chain_type=None, flow_type=None, flow_chain_id=None, flow_id=None, flow_state=None, next_flow_state=None, flow_event=None, duration=None):
        """
        FlowDetails - a model defined in Swagger
        """

        self._flow_chain_type = None
        self._flow_type = None
        self._flow_chain_id = None
        self._flow_id = None
        self._flow_state = None
        self._next_flow_state = None
        self._flow_event = None
        self._duration = None

        if flow_chain_type is not None:
          self.flow_chain_type = flow_chain_type
        if flow_type is not None:
          self.flow_type = flow_type
        if flow_chain_id is not None:
          self.flow_chain_id = flow_chain_id
        if flow_id is not None:
          self.flow_id = flow_id
        if flow_state is not None:
          self.flow_state = flow_state
        if next_flow_state is not None:
          self.next_flow_state = next_flow_state
        if flow_event is not None:
          self.flow_event = flow_event
        if duration is not None:
          self.duration = duration

    @property
    def flow_chain_type(self):
        """
        Gets the flow_chain_type of this FlowDetails.

        :return: The flow_chain_type of this FlowDetails.
        :rtype: str
        """
        return self._flow_chain_type

    @flow_chain_type.setter
    def flow_chain_type(self, flow_chain_type):
        """
        Sets the flow_chain_type of this FlowDetails.

        :param flow_chain_type: The flow_chain_type of this FlowDetails.
        :type: str
        """

        self._flow_chain_type = flow_chain_type

    @property
    def flow_type(self):
        """
        Gets the flow_type of this FlowDetails.

        :return: The flow_type of this FlowDetails.
        :rtype: str
        """
        return self._flow_type

    @flow_type.setter
    def flow_type(self, flow_type):
        """
        Sets the flow_type of this FlowDetails.

        :param flow_type: The flow_type of this FlowDetails.
        :type: str
        """

        self._flow_type = flow_type

    @property
    def flow_chain_id(self):
        """
        Gets the flow_chain_id of this FlowDetails.

        :return: The flow_chain_id of this FlowDetails.
        :rtype: str
        """
        return self._flow_chain_id

    @flow_chain_id.setter
    def flow_chain_id(self, flow_chain_id):
        """
        Sets the flow_chain_id of this FlowDetails.

        :param flow_chain_id: The flow_chain_id of this FlowDetails.
        :type: str
        """

        self._flow_chain_id = flow_chain_id

    @property
    def flow_id(self):
        """
        Gets the flow_id of this FlowDetails.

        :return: The flow_id of this FlowDetails.
        :rtype: str
        """
        return self._flow_id

    @flow_id.setter
    def flow_id(self, flow_id):
        """
        Sets the flow_id of this FlowDetails.

        :param flow_id: The flow_id of this FlowDetails.
        :type: str
        """

        self._flow_id = flow_id

    @property
    def flow_state(self):
        """
        Gets the flow_state of this FlowDetails.

        :return: The flow_state of this FlowDetails.
        :rtype: str
        """
        return self._flow_state

    @flow_state.setter
    def flow_state(self, flow_state):
        """
        Sets the flow_state of this FlowDetails.

        :param flow_state: The flow_state of this FlowDetails.
        :type: str
        """

        self._flow_state = flow_state

    @property
    def next_flow_state(self):
        """
        Gets the next_flow_state of this FlowDetails.

        :return: The next_flow_state of this FlowDetails.
        :rtype: str
        """
        return self._next_flow_state

    @next_flow_state.setter
    def next_flow_state(self, next_flow_state):
        """
        Sets the next_flow_state of this FlowDetails.

        :param next_flow_state: The next_flow_state of this FlowDetails.
        :type: str
        """

        self._next_flow_state = next_flow_state

    @property
    def flow_event(self):
        """
        Gets the flow_event of this FlowDetails.

        :return: The flow_event of this FlowDetails.
        :rtype: str
        """
        return self._flow_event

    @flow_event.setter
    def flow_event(self, flow_event):
        """
        Sets the flow_event of this FlowDetails.

        :param flow_event: The flow_event of this FlowDetails.
        :type: str
        """

        self._flow_event = flow_event

    @property
    def duration(self):
        """
        Gets the duration of this FlowDetails.

        :return: The duration of this FlowDetails.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this FlowDetails.

        :param duration: The duration of this FlowDetails.
        :type: int
        """

        self._duration = duration

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FlowDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
