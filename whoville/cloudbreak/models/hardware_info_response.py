# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class HardwareInfoResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'group_name': 'str',
        'state': 'str',
        'private_ip': 'str',
        'public_ip': 'str',
        'ssh_port': 'int',
        'instance_id': 'str',
        'ambari_server': 'bool',
        'discovery_fqdn': 'str',
        'instance_group': 'str',
        'instance_status': 'str',
        'instance_metadata_type': 'str',
        'image_name': 'str',
        'os': 'str',
        'os_type': 'str',
        'image_catalog_url': 'str',
        'image_id': 'str',
        'image_catalog_name': 'str',
        'package_versions': 'dict(str, str)',
        'template': 'TemplateResponse'
    }

    attribute_map = {
        'name': 'name',
        'group_name': 'groupName',
        'state': 'state',
        'private_ip': 'privateIp',
        'public_ip': 'publicIp',
        'ssh_port': 'sshPort',
        'instance_id': 'instanceId',
        'ambari_server': 'ambariServer',
        'discovery_fqdn': 'discoveryFQDN',
        'instance_group': 'instanceGroup',
        'instance_status': 'instanceStatus',
        'instance_metadata_type': 'instanceMetadataType',
        'image_name': 'imageName',
        'os': 'os',
        'os_type': 'osType',
        'image_catalog_url': 'imageCatalogUrl',
        'image_id': 'imageId',
        'image_catalog_name': 'imageCatalogName',
        'package_versions': 'packageVersions',
        'template': 'template'
    }

    def __init__(self, name=None, group_name=None, state=None, private_ip=None, public_ip=None, ssh_port=None, instance_id=None, ambari_server=False, discovery_fqdn=None, instance_group=None, instance_status=None, instance_metadata_type=None, image_name=None, os=None, os_type=None, image_catalog_url=None, image_id=None, image_catalog_name=None, package_versions=None, template=None):
        """
        HardwareInfoResponse - a model defined in Swagger
        """

        self._name = None
        self._group_name = None
        self._state = None
        self._private_ip = None
        self._public_ip = None
        self._ssh_port = None
        self._instance_id = None
        self._ambari_server = None
        self._discovery_fqdn = None
        self._instance_group = None
        self._instance_status = None
        self._instance_metadata_type = None
        self._image_name = None
        self._os = None
        self._os_type = None
        self._image_catalog_url = None
        self._image_id = None
        self._image_catalog_name = None
        self._package_versions = None
        self._template = None

        self.name = name
        self.group_name = group_name
        if state is not None:
          self.state = state
        if private_ip is not None:
          self.private_ip = private_ip
        if public_ip is not None:
          self.public_ip = public_ip
        if ssh_port is not None:
          self.ssh_port = ssh_port
        if instance_id is not None:
          self.instance_id = instance_id
        if ambari_server is not None:
          self.ambari_server = ambari_server
        if discovery_fqdn is not None:
          self.discovery_fqdn = discovery_fqdn
        if instance_group is not None:
          self.instance_group = instance_group
        if instance_status is not None:
          self.instance_status = instance_status
        if instance_metadata_type is not None:
          self.instance_metadata_type = instance_metadata_type
        if image_name is not None:
          self.image_name = image_name
        if os is not None:
          self.os = os
        if os_type is not None:
          self.os_type = os_type
        if image_catalog_url is not None:
          self.image_catalog_url = image_catalog_url
        if image_id is not None:
          self.image_id = image_id
        if image_catalog_name is not None:
          self.image_catalog_name = image_catalog_name
        if package_versions is not None:
          self.package_versions = package_versions
        if template is not None:
          self.template = template

    @property
    def name(self):
        """
        Gets the name of this HardwareInfoResponse.
        name of the resource

        :return: The name of this HardwareInfoResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this HardwareInfoResponse.
        name of the resource

        :param name: The name of this HardwareInfoResponse.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def group_name(self):
        """
        Gets the group_name of this HardwareInfoResponse.
        name of the host group

        :return: The group_name of this HardwareInfoResponse.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """
        Sets the group_name of this HardwareInfoResponse.
        name of the host group

        :param group_name: The group_name of this HardwareInfoResponse.
        :type: str
        """
        if group_name is None:
            raise ValueError("Invalid value for `group_name`, must not be `None`")

        self._group_name = group_name

    @property
    def state(self):
        """
        Gets the state of this HardwareInfoResponse.
        state of the host

        :return: The state of this HardwareInfoResponse.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this HardwareInfoResponse.
        state of the host

        :param state: The state of this HardwareInfoResponse.
        :type: str
        """

        self._state = state

    @property
    def private_ip(self):
        """
        Gets the private_ip of this HardwareInfoResponse.
        private ip of the insctance

        :return: The private_ip of this HardwareInfoResponse.
        :rtype: str
        """
        return self._private_ip

    @private_ip.setter
    def private_ip(self, private_ip):
        """
        Sets the private_ip of this HardwareInfoResponse.
        private ip of the insctance

        :param private_ip: The private_ip of this HardwareInfoResponse.
        :type: str
        """

        self._private_ip = private_ip

    @property
    def public_ip(self):
        """
        Gets the public_ip of this HardwareInfoResponse.
        public ip of the instance

        :return: The public_ip of this HardwareInfoResponse.
        :rtype: str
        """
        return self._public_ip

    @public_ip.setter
    def public_ip(self, public_ip):
        """
        Sets the public_ip of this HardwareInfoResponse.
        public ip of the instance

        :param public_ip: The public_ip of this HardwareInfoResponse.
        :type: str
        """

        self._public_ip = public_ip

    @property
    def ssh_port(self):
        """
        Gets the ssh_port of this HardwareInfoResponse.

        :return: The ssh_port of this HardwareInfoResponse.
        :rtype: int
        """
        return self._ssh_port

    @ssh_port.setter
    def ssh_port(self, ssh_port):
        """
        Sets the ssh_port of this HardwareInfoResponse.

        :param ssh_port: The ssh_port of this HardwareInfoResponse.
        :type: int
        """

        self._ssh_port = ssh_port

    @property
    def instance_id(self):
        """
        Gets the instance_id of this HardwareInfoResponse.
        id of the instance

        :return: The instance_id of this HardwareInfoResponse.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """
        Sets the instance_id of this HardwareInfoResponse.
        id of the instance

        :param instance_id: The instance_id of this HardwareInfoResponse.
        :type: str
        """

        self._instance_id = instance_id

    @property
    def ambari_server(self):
        """
        Gets the ambari_server of this HardwareInfoResponse.
        ambari server address

        :return: The ambari_server of this HardwareInfoResponse.
        :rtype: bool
        """
        return self._ambari_server

    @ambari_server.setter
    def ambari_server(self, ambari_server):
        """
        Sets the ambari_server of this HardwareInfoResponse.
        ambari server address

        :param ambari_server: The ambari_server of this HardwareInfoResponse.
        :type: bool
        """

        self._ambari_server = ambari_server

    @property
    def discovery_fqdn(self):
        """
        Gets the discovery_fqdn of this HardwareInfoResponse.
        the fully qualified domain name of the node in the service discovery cluster

        :return: The discovery_fqdn of this HardwareInfoResponse.
        :rtype: str
        """
        return self._discovery_fqdn

    @discovery_fqdn.setter
    def discovery_fqdn(self, discovery_fqdn):
        """
        Sets the discovery_fqdn of this HardwareInfoResponse.
        the fully qualified domain name of the node in the service discovery cluster

        :param discovery_fqdn: The discovery_fqdn of this HardwareInfoResponse.
        :type: str
        """

        self._discovery_fqdn = discovery_fqdn

    @property
    def instance_group(self):
        """
        Gets the instance_group of this HardwareInfoResponse.
        name of the instance group

        :return: The instance_group of this HardwareInfoResponse.
        :rtype: str
        """
        return self._instance_group

    @instance_group.setter
    def instance_group(self, instance_group):
        """
        Sets the instance_group of this HardwareInfoResponse.
        name of the instance group

        :param instance_group: The instance_group of this HardwareInfoResponse.
        :type: str
        """

        self._instance_group = instance_group

    @property
    def instance_status(self):
        """
        Gets the instance_status of this HardwareInfoResponse.
        status of the instance

        :return: The instance_status of this HardwareInfoResponse.
        :rtype: str
        """
        return self._instance_status

    @instance_status.setter
    def instance_status(self, instance_status):
        """
        Sets the instance_status of this HardwareInfoResponse.
        status of the instance

        :param instance_status: The instance_status of this HardwareInfoResponse.
        :type: str
        """
        allowed_values = ["REQUESTED", "CREATED", "UNREGISTERED", "REGISTERED", "DECOMMISSIONED", "TERMINATED", "DELETED_ON_PROVIDER_SIDE", "FAILED", "STOPPED"]
        if instance_status not in allowed_values:
            raise ValueError(
                "Invalid value for `instance_status` ({0}), must be one of {1}"
                .format(instance_status, allowed_values)
            )

        self._instance_status = instance_status

    @property
    def instance_metadata_type(self):
        """
        Gets the instance_metadata_type of this HardwareInfoResponse.
        type of the instance

        :return: The instance_metadata_type of this HardwareInfoResponse.
        :rtype: str
        """
        return self._instance_metadata_type

    @instance_metadata_type.setter
    def instance_metadata_type(self, instance_metadata_type):
        """
        Sets the instance_metadata_type of this HardwareInfoResponse.
        type of the instance

        :param instance_metadata_type: The instance_metadata_type of this HardwareInfoResponse.
        :type: str
        """
        allowed_values = ["GATEWAY", "GATEWAY_PRIMARY", "CORE"]
        if instance_metadata_type not in allowed_values:
            raise ValueError(
                "Invalid value for `instance_metadata_type` ({0}), must be one of {1}"
                .format(instance_metadata_type, allowed_values)
            )

        self._instance_metadata_type = instance_metadata_type

    @property
    def image_name(self):
        """
        Gets the image_name of this HardwareInfoResponse.

        :return: The image_name of this HardwareInfoResponse.
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """
        Sets the image_name of this HardwareInfoResponse.

        :param image_name: The image_name of this HardwareInfoResponse.
        :type: str
        """

        self._image_name = image_name

    @property
    def os(self):
        """
        Gets the os of this HardwareInfoResponse.

        :return: The os of this HardwareInfoResponse.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """
        Sets the os of this HardwareInfoResponse.

        :param os: The os of this HardwareInfoResponse.
        :type: str
        """

        self._os = os

    @property
    def os_type(self):
        """
        Gets the os_type of this HardwareInfoResponse.

        :return: The os_type of this HardwareInfoResponse.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """
        Sets the os_type of this HardwareInfoResponse.

        :param os_type: The os_type of this HardwareInfoResponse.
        :type: str
        """

        self._os_type = os_type

    @property
    def image_catalog_url(self):
        """
        Gets the image_catalog_url of this HardwareInfoResponse.

        :return: The image_catalog_url of this HardwareInfoResponse.
        :rtype: str
        """
        return self._image_catalog_url

    @image_catalog_url.setter
    def image_catalog_url(self, image_catalog_url):
        """
        Sets the image_catalog_url of this HardwareInfoResponse.

        :param image_catalog_url: The image_catalog_url of this HardwareInfoResponse.
        :type: str
        """

        self._image_catalog_url = image_catalog_url

    @property
    def image_id(self):
        """
        Gets the image_id of this HardwareInfoResponse.

        :return: The image_id of this HardwareInfoResponse.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """
        Sets the image_id of this HardwareInfoResponse.

        :param image_id: The image_id of this HardwareInfoResponse.
        :type: str
        """

        self._image_id = image_id

    @property
    def image_catalog_name(self):
        """
        Gets the image_catalog_name of this HardwareInfoResponse.

        :return: The image_catalog_name of this HardwareInfoResponse.
        :rtype: str
        """
        return self._image_catalog_name

    @image_catalog_name.setter
    def image_catalog_name(self, image_catalog_name):
        """
        Sets the image_catalog_name of this HardwareInfoResponse.

        :param image_catalog_name: The image_catalog_name of this HardwareInfoResponse.
        :type: str
        """

        self._image_catalog_name = image_catalog_name

    @property
    def package_versions(self):
        """
        Gets the package_versions of this HardwareInfoResponse.

        :return: The package_versions of this HardwareInfoResponse.
        :rtype: dict(str, str)
        """
        return self._package_versions

    @package_versions.setter
    def package_versions(self, package_versions):
        """
        Sets the package_versions of this HardwareInfoResponse.

        :param package_versions: The package_versions of this HardwareInfoResponse.
        :type: dict(str, str)
        """

        self._package_versions = package_versions

    @property
    def template(self):
        """
        Gets the template of this HardwareInfoResponse.
        instancegroup related template

        :return: The template of this HardwareInfoResponse.
        :rtype: TemplateResponse
        """
        return self._template

    @template.setter
    def template(self, template):
        """
        Sets the template of this HardwareInfoResponse.
        instancegroup related template

        :param template: The template of this HardwareInfoResponse.
        :type: TemplateResponse
        """

        self._template = template

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, HardwareInfoResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
