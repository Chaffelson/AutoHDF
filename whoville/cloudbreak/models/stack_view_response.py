# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StackViewResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'cloud_platform': 'str',
        'platform_variant': 'str',
        'credential': 'CredentialViewResponse',
        'hdp_version': 'str',
        'cluster': 'ClusterViewResponse',
        'status': 'str',
        'node_count': 'int',
        'created': 'int',
        'terminated': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'cloud_platform': 'cloudPlatform',
        'platform_variant': 'platformVariant',
        'credential': 'credential',
        'hdp_version': 'hdpVersion',
        'cluster': 'cluster',
        'status': 'status',
        'node_count': 'nodeCount',
        'created': 'created',
        'terminated': 'terminated'
    }

    def __init__(self, id=None, name=None, cloud_platform=None, platform_variant=None, credential=None, hdp_version=None, cluster=None, status=None, node_count=None, created=None, terminated=None):
        """
        StackViewResponse - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._cloud_platform = None
        self._platform_variant = None
        self._credential = None
        self._hdp_version = None
        self._cluster = None
        self._status = None
        self._node_count = None
        self._created = None
        self._terminated = None

        if id is not None:
          self.id = id
        self.name = name
        if cloud_platform is not None:
          self.cloud_platform = cloud_platform
        if platform_variant is not None:
          self.platform_variant = platform_variant
        if credential is not None:
          self.credential = credential
        if hdp_version is not None:
          self.hdp_version = hdp_version
        if cluster is not None:
          self.cluster = cluster
        if status is not None:
          self.status = status
        if node_count is not None:
          self.node_count = node_count
        if created is not None:
          self.created = created
        if terminated is not None:
          self.terminated = terminated

    @property
    def id(self):
        """
        Gets the id of this StackViewResponse.
        id of the stack

        :return: The id of this StackViewResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this StackViewResponse.
        id of the stack

        :param id: The id of this StackViewResponse.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this StackViewResponse.
        name of the stack

        :return: The name of this StackViewResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this StackViewResponse.
        name of the stack

        :param name: The name of this StackViewResponse.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def cloud_platform(self):
        """
        Gets the cloud_platform of this StackViewResponse.
        type of cloud provider

        :return: The cloud_platform of this StackViewResponse.
        :rtype: str
        """
        return self._cloud_platform

    @cloud_platform.setter
    def cloud_platform(self, cloud_platform):
        """
        Sets the cloud_platform of this StackViewResponse.
        type of cloud provider

        :param cloud_platform: The cloud_platform of this StackViewResponse.
        :type: str
        """

        self._cloud_platform = cloud_platform

    @property
    def platform_variant(self):
        """
        Gets the platform_variant of this StackViewResponse.
        cloud provider api variant

        :return: The platform_variant of this StackViewResponse.
        :rtype: str
        """
        return self._platform_variant

    @platform_variant.setter
    def platform_variant(self, platform_variant):
        """
        Sets the platform_variant of this StackViewResponse.
        cloud provider api variant

        :param platform_variant: The platform_variant of this StackViewResponse.
        :type: str
        """

        self._platform_variant = platform_variant

    @property
    def credential(self):
        """
        Gets the credential of this StackViewResponse.
        stack related credential

        :return: The credential of this StackViewResponse.
        :rtype: CredentialViewResponse
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """
        Sets the credential of this StackViewResponse.
        stack related credential

        :param credential: The credential of this StackViewResponse.
        :type: CredentialViewResponse
        """

        self._credential = credential

    @property
    def hdp_version(self):
        """
        Gets the hdp_version of this StackViewResponse.
        specific version of HDP

        :return: The hdp_version of this StackViewResponse.
        :rtype: str
        """
        return self._hdp_version

    @hdp_version.setter
    def hdp_version(self, hdp_version):
        """
        Sets the hdp_version of this StackViewResponse.
        specific version of HDP

        :param hdp_version: The hdp_version of this StackViewResponse.
        :type: str
        """

        self._hdp_version = hdp_version

    @property
    def cluster(self):
        """
        Gets the cluster of this StackViewResponse.
        cluster object on stack

        :return: The cluster of this StackViewResponse.
        :rtype: ClusterViewResponse
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """
        Sets the cluster of this StackViewResponse.
        cluster object on stack

        :param cluster: The cluster of this StackViewResponse.
        :type: ClusterViewResponse
        """

        self._cluster = cluster

    @property
    def status(self):
        """
        Gets the status of this StackViewResponse.
        status of the stack

        :return: The status of this StackViewResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this StackViewResponse.
        status of the stack

        :param status: The status of this StackViewResponse.
        :type: str
        """
        allowed_values = ["REQUESTED", "CREATE_IN_PROGRESS", "AVAILABLE", "UPDATE_IN_PROGRESS", "UPDATE_REQUESTED", "UPDATE_FAILED", "CREATE_FAILED", "ENABLE_SECURITY_FAILED", "PRE_DELETE_IN_PROGRESS", "DELETE_IN_PROGRESS", "DELETE_FAILED", "DELETE_COMPLETED", "STOPPED", "STOP_REQUESTED", "START_REQUESTED", "STOP_IN_PROGRESS", "START_IN_PROGRESS", "START_FAILED", "STOP_FAILED", "WAIT_FOR_SYNC", "MAINTENANCE_MODE_ENABLED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def node_count(self):
        """
        Gets the node_count of this StackViewResponse.
        node count of the stack

        :return: The node_count of this StackViewResponse.
        :rtype: int
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """
        Sets the node_count of this StackViewResponse.
        node count of the stack

        :param node_count: The node_count of this StackViewResponse.
        :type: int
        """

        self._node_count = node_count

    @property
    def created(self):
        """
        Gets the created of this StackViewResponse.
        creation time of the stack in long

        :return: The created of this StackViewResponse.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this StackViewResponse.
        creation time of the stack in long

        :param created: The created of this StackViewResponse.
        :type: int
        """

        self._created = created

    @property
    def terminated(self):
        """
        Gets the terminated of this StackViewResponse.
        termination completion time of stack in long

        :return: The terminated of this StackViewResponse.
        :rtype: int
        """
        return self._terminated

    @terminated.setter
    def terminated(self, terminated):
        """
        Sets the terminated of this StackViewResponse.
        termination completion time of stack in long

        :param terminated: The terminated of this StackViewResponse.
        :type: int
        """

        self._terminated = terminated

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StackViewResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
