RENAME THIS FILE TO .profile.yml before putting your secrets in it, so you don't commit them to the repo!
Then delete these two lines - they are here to cause an error if you don't read instructions

infra:
  EC2:                          # EC2 matches the Provider Service name that libcloud uses, do not change for AWS users
    key: ...                    # Key for your AWS Credential
    secret: ...                 # Secret for your AWS Credential
    region: eu-central-1        # Region to deploy everything in
    infraarn: arn:aws:iam::<account>:instance-profile/<InfRoleName>  #  ARN for Cloudbreak Credential, see bottom note #1
    credarn: arn:aws:iam::<account>:instance-profile/<CredRoleName>  #  ARN for Cloudbreak Credential, see bottom note #1
deploy:
  namespace: whoville-          # This namespace will be prefixed to any object created in a session
  globalpurge: false            # CAUTION: Will kill anything it finds matching namespace
  email: admin@example.com      # Email to login to Cloudbreak, does not have to be real email address
  username: admin               # Username applied to Clusters, some demos have it hardcoded
  password: admin-password1     # Username applied to Clusters, some demos have it hardcoded
  sshkey_name: <sshkeyname>     # Name for your SSH Keypair, either to be created or already existing
  sshkey_pub: ssh-rsa ...       # Public key for your SSH Keypair
  githubuser:                   # Github username if you want to pull directly from Github
  githubtoken:                  # Account token for Github, see bottom note #2
  resources:
    - loc: local                # local or github are accepted
      uri: resources/v2         # Path to resources. If using from Docker ensure the volume is mounted appropriately
  objectstore: s3               # Objectstore to target if using objectstore backing for services
  bucket: whoville              # Bucketname in Objectstore if using objectstore backing for services
  bucketrole: arn:aws:iam::<account>:instance-profile/<CredRoleName>  # ARN for Cloudbreak Credential, see bottom note #1

# Note #1
#  Cloudbreak works best on AWS from Credential Roles rather than Keys, particularly if you want to use S3
#  See the following guide for creating suitable roles
#  https://docs.hortonworks.com/HDPDocuments/Cloudbreak/Cloudbreak-2.7.1/content/aws-quick/index.html#create-cloudbreak-credential
#
# Note #1
# https://blog.github.com/2013-05-16-personal-api-tokens/